// // The module 'vscode' contains the VS Code extensibility API
// // Import the module and reference it with the alias vscode in your code below
// import * as vscode from 'vscode';
// import { Parser } from './parser';
// import { TaskTreeDataProvider } from './TaskTreeDataProvider';
// // 引入 TreeViewProvider 的类
// import { Info } from "./Info";


// // this method is called when your extension is activated
// // your extension is activated the very first time the command is executed
// export function activate(context: vscode.ExtensionContext) {

// 	// Use the console to output diagnostic information (console.log) and errors (console.error)
// 	// This line of code will only be executed once when your extension is activated
// 	console.log('Congratulations, your extension "test" is now active!');

// 	// The command has been defined in the package.json file
// 	// Now provide the implementation of the command with registerCommand
// 	// The commandId parameter must match the command field in package.json
// 	// T:使用commands.registerCommand VS Code API 将一个函数绑定到你注册的命令IDextension.helloWorld上。
// 	let disposable = vscode.commands.registerCommand('test.helloWorld', () => {
// 		// The code you place here will be executed every time your command is executed

// 		// Display a message box to the user
// 		// vscode.window.showInformationMessage('Hello VS Code from Test!');
// 		// 定位打开的聚焦的文件
// 		const editor = vscode.window.activeTextEditor;
// 		if (editor) {

// 			// 读取文件类型，判断是不是.ts文件
// 			// const document = editor.document;
// 			// const languageId = document.languageId;
// 			// vscode.window.showInformationMessage(languageId);
// 			// if (languageId == 'typescript') {
// 				// // 如果是，则区分文件内部注释/非注释
// 				// let parser: Parser = new Parser();
// 				// parser.SetRegex(editor, languageId);
// 				// parser.FindSingleLineComments(editor);
// 				// parser.FindMultilineComments(editor);
// 				// // // 将注释删掉
// 				// vscode.workspace.applyEdit(parser.edit);
// 				// let aaa = new vscode.WorkspaceEdit();
// 				// vscode.workspace.applyEdit(aaa);

// 				// // // 全部删除
// 				// let edit = new vscode.WorkspaceEdit();
// 				// let uri = editor.document.uri;
// 				// for (var l = 0; l < editor.document.lineCount; l++) {
// 				// 	let startPos = new vscode.Position(l, 0);
// 				// 	let endPos = new vscode.Position(l + 1, 0);
// 				// 	let range = new vscode.Range(startPos, endPos);           		
// 				// 	edit.delete(uri, range);
// 				// }
// 				// vscode.workspace.applyEdit(edit);

// 				// // 将聚焦的文件中前两行输出成消息弹窗
// 				// let startPos = new vscode.Position(0, 0);
// 				// let endPos = new vscode.Position(2, 0);
// 				// let range = new vscode.Range(startPos, endPos);
// 				//vscode.window.showInformationMessage(editor.document.getText(range));
// 		// }
// 			// 新文件的路径
// 			let edit = new vscode.WorkspaceEdit();
// 			let uri = editor.document.uri;
// 			let uri_path = uri.path;
// 			var splitted = uri_path.split('/');
// 			var uri_filename = splitted.reverse()[0];
// 			var uri_dir = uri_path.split(uri_filename)[0];
// 			let uri2_path = uri_dir + "back" + uri_filename;
// 			let uri2 = vscode.Uri.file(uri2_path);
// 			// 路径格式在名字后面加.back，也就是.前面。考虑有后缀（一个）和无后缀两种情况
// 			var uri_filename_splitted_list = uri_filename.split('.');
// 			var uri_filename_null_type = uri_filename_splitted_list[0];
			
// 			let uri3_path = '';
// 			if (uri_filename_splitted_list.length === 2){
// 				var uri_filename_type = uri_filename.split('.')[1];
// 				uri3_path = uri_dir + uri_filename_null_type + ".back." + uri_filename_type;
// 			}else{
// 				uri3_path = uri_dir + uri_filename_null_type + ".back";
// 			}
// 			let uri3 = vscode.Uri.file(uri3_path);

// 			// 创建新文件在当前文件夹
// 			// let aaa = editor.document.getText();
// 			// let bbb = vscode.workspace.fs.readFile(uri);
// 			// let ccc = vscode.workspace.FileSystemProvider.readFile(uri);//只是接口 没有实现
// 			// vscode.workspace.fs.writeFile(uri2, bbb);
// 			// vscode.workspace.fs.createDirectory(uri2);
// 			// 把当前文件拷贝到新文件路径
// 			vscode.workspace.fs.copy(uri,uri2);
// 			// vscode.window.showInformationMessage(uri_filename);
// 			// vscode.window.showInformationMessage(uri2_path);
// 			vscode.window.showInformationMessage(uri3_path);
// 			// vscode.window.showInformationMessage(splitted[0]);
// 			// vscode.window.showInformationMessage(splitted[1]);
// 			// vscode.window.showInformationMessage(uri2.path);
// 			// FileSystemProvider.createDirectory(uri2);
// 			// FileSystemProvider.writeFile(uri, edit, options: { create: boolean, overwrite: boolean })
// 			// let aaa = edit.get(uri);
// 			// vscode.window.showTextDocument(aaa);
// 			// edit.TextDocument.save();
// 			// 打开文件
// 			// vscode.open.




// 		}


// 	});

// 	const Provider = new TaskTreeDataProvider();
//   	vscode.window.registerTreeDataProvider("treeView-item1", Provider);
	

// 	context.subscriptions.push(disposable);
// }

// // this method is called when your extension is deactivated
// export function deactivate() { }
